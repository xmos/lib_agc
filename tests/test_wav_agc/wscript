import sys
import subprocess
import os
from waflib import Options, Errors
from waflib.Build import BuildContext, CleanContext
sys.path.append('../../../lib_voice_toolbox/python')

xcore_ai = os.environ.get('XCOREAI', '0')
print("xcore_ai = ",xcore_ai)

TARGETS = ['xcore200', 'xcoreai']
# This creates build and clean commands for each BUILD_CONFIG
def create_waf_contexts(targets):
    for test_name in targets:
        for ctx in (BuildContext, CleanContext):
            raw_context = ctx.__name__.replace('Context', '').lower()

            class tmp(ctx):
                cmd = raw_context + '_' + test_name
                variant = os.path.split(os.getcwd())[1] + '_' + test_name
                config = test_name
                target = test_name

create_waf_contexts(TARGETS)

def options(opt):
    opt.add_option('--target', action='store', default='xcore200')
    opt.add_option('--config_file', default='../../lib_agc/config/agc_2ch.json')
    opt.load('xwaf.xcommon')

def configure(conf):
    conf.load('xwaf.compiler_xcc')
    conf.env.PROJECT_ROOT = '../../..'
    conf.load('xwaf.xcommon')    

def build(bld):
    print('bld.variant = ', bld.variant)
    print('bld.options.target = ', bld.options.target)
    if not bld.variant:
        build_configs = [
            c for c in TARGETS if c == bld.options.target
        ]

        if len(build_configs) == 0:
            bld.fatal('specify a target with --target.\nAvailable targets: {}'.format(', '.join(TARGETS)))
            return

        build_commands = ['{}_{}'.format(bld.cmd, c) for c in build_configs]
        print("build_commands = {}".format(build_commands))

        if not build_commands:
            bld.fatal/(
                '{} does not match any configs'.format(bld.options.ap_config))

        cmd_str = {'build': 'Building', 'clean': 'Cleaning', 'list': "Listing"}[bld.cmd]
        print('{} configs:\n    {}'.format(cmd_str, '\n    '.join(
            build_configs)))
        if not bld.cmd == 'list':
            Options.commands = build_commands + Options.commands
        return

    subprocess.call(['../../.venv/bin/python', '../../lib_agc/generate_config.py'])
    target_path = 'bin/' + bld.options.target
    #print('target_path ',target_path)
    bld.env.XSCOPE = bld.path.find_resource('config.xscope')
    depends_on = ['lib_agc', 'audio_test_tools', 'lib_voice_toolbox']
    makefile_opts = {}
    makefile_opts['SOURCE_DIRS'] = ['src']
    if(bld.target == 'xcoreai'):
        print('TARGET XCOREAI')
        makefile_opts['TARGET'] = ['XCORE-AI-EXPLORER']
    else:
        print('TARGET XCORE200')
        makefile_opts['TARGET'] = ['XCORE-200-EXPLORER']

    makefile_opts['INCLUDE_DIRS'] = ['src', 'autogenerated']
    makefile_opts['XCC_FLAGS'] = ['-O2', '-g', '-Wall', '-report']
    makefile_opts['APP_NAME'] = [bld.options.target]
    makefile_opts['USED_MODULES'] = depends_on
    makefile_opts['XCOMMON_MAKEFILE'] = ['Makefile.common']
    bld.do_xcommon(makefile_opts)

def dist(ctx):
    ctx.load('xwaf.xcommon')

def distcheck(ctx):
    ctx.load('xwaf.xcommon')
    
